#!/usr/bin/env python3

from datetime import datetime
import json
import os
import random
import re
import subprocess
import sys


def do_backup(repo_info, conf):
    repo = repo_info['repo']
    passphrase = repo_info.get('passphrase')
    prefix = conf['prefix']
    prefix_glob = conf['prefix-glob']
    keep = conf['keep']

    timestamp = datetime.now().astimezone().strftime('%FT%T%z')
    create_cmd = [
        'create',
        '--progress',
        '--stats',
        f'{repo}::{prefix}{timestamp}',
    ] + conf['paths']
    borg_cmd(*create_cmd, passphrase=passphrase)

    borg_cmd(
        'prune',
        repo,
        '--glob-archives',
        prefix_glob,
        '--stats',
        f'--keep-within={keep["within"]}',
        f'--keep-daily={keep["daily"]}',
        f'--keep-weekly={keep["weekly"]}',
        f'--keep-monthly={keep["monthly"]}',
        f'--keep-yearly={keep["yearly"]}',
        passphrase=passphrase
    )


def get_ssid():
    getssid_path = os.path.join(os.path.dirname(__file__), 'getssid')
    out = subprocess.check_output([getssid_path]).decode('utf8').strip()
    if out == 'missing value':
        return None
    return out


def borg_cmd(*cmd, passphrase=None):
    cmd = ('borg',) + cmd
    if passphrase is not None:
        read_fd, write_fd = os.pipe()
        env = dict(os.environ)
        env['BORG_PASSPHRASE_FD'] = str(read_fd)
        # POSIX requires pipe buffer to be at least 512 bytes, so it's fine to do a
        # blocking write here before there is anyone reading
        os.write(write_fd, passphrase.encode('utf8'))
        os.close(write_fd)  # EOF
        subprocess.check_call(cmd, pass_fds=(sys.stdout.fileno(), sys.stderr.fileno(), read_fd), env=env)
        os.close(read_fd)
    else:
        subprocess.check_call(cmd, pass_fds=(sys.stdout.fileno(), sys.stderr.fileno()))


def main():
    if len(sys.argv) not in [2, 3]:
        print(f'usage: {sys.argv[0]} config_file [override_ssid]', file=sys.stderr)
        exit(1)
    with open(sys.argv[1]) as f:
        conf = json.load(f)
    if len(sys.argv) == 3:
        ssid = sys.argv[2]
    else:
        ssid = get_ssid()
    if ssid is None:
        print(f'Not connected to a WiFi network.', file=sys.stderr)
        exit(1)

    eligible_repos = [r for r in conf['repos'] if ssid in r['ssids']]
    if not eligible_repos:
        print(f'No backup configuration for SSID "{ssid}".', file=sys.stderr)
        exit(1)
    print(f'Eligible repos: {", ".join(r["name"] for r in eligible_repos)}', file=sys.stderr)
    repo_info = random.choice(eligible_repos)
    print(f'Backing up to {repo_info["name"]} ({repo_info["repo"]})', file=sys.stderr)

    sys.stderr.flush()
    del conf['repos']
    do_backup(repo_info, conf)


if __name__ == '__main__':
    main()
